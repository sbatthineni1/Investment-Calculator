{"version":3,"sources":["components/FormInput/FormInput.module.css","assets/investment-calculator-logo.png","components/Header/Header.module.css","components/InvestmentList/InvestmentList.module.css","components/Header/Header.js","components/FormInput/FormInput.js","components/InvestmentList/InvestmentList.js","App.js","index.js"],"names":["module","exports","form","input-group","actions","button","buttonAlt","__webpack_require__","p","header","result","Header","props","React","createElement","className","styles","src","logo","alt","FormInput","intialUserInput","current-savings","yearly-contribution","expected-return","duration","_useState","useState","_useState2","_slicedToArray","userInput","setUserInput","inputFormHandler","input","value","preValue","_objectSpread","_defineProperty","console","log","onSubmit","event","preventDefault","onFormSubmit","htmlFor","onChange","target","type","id","onClick","formatter","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","InvestmentList","onReceiveData","map","yearData","key","year","format","savingsEndOfYear","yearlyInterest","intialInvestment","yearlyContribution","App","yearlyData","currentSavings","expectedReturn","i","push","textAlign","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.1e2b5c59.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"FormInput_form__2ws34\",\"input-group\":\"FormInput_input-group__3xKX0\",\"actions\":\"FormInput_actions__1T3cx\",\"button\":\"FormInput_button__37kfc\",\"buttonAlt\":\"FormInput_buttonAlt__2XnZ2\"};","module.exports = __webpack_public_path__ + \"static/media/investment-calculator-logo.62548ed9.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3RcMn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"result\":\"InvestmentList_result__2LenZ\"};","import logo from '../../assets/investment-calculator-logo.png';\r\nimport styles from './Header.module.css';\r\nimport React from 'react';\r\nconst Header= (props) => {\r\n    return (\r\n        <header className={styles.header}>\r\n        <img src={logo} alt=\"logo\" />\r\n        <h1>Investment Calculator</h1>\r\n      </header>\r\n    );\r\n}\r\nexport default Header;","import React, { useState } from \"react\";\r\nimport styles from './FormInput.module.css';\r\n\r\nconst FormInput = (props) => {\r\n  const intialUserInput = {\r\n    \"current-savings\": 10000,\r\n    \"yearly-contribution\": 1200,\r\n    \"expected-return\": 7,\r\n    duration: 10,\r\n  };\r\n\r\n  const [userInput, setUserInput] = useState(intialUserInput);\r\n\r\n  const formSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n    props.onFormSubmit(userInput);\r\n    console.log(\"Submit\");\r\n  };\r\n\r\n  const formResetHandler = () => {\r\n    setUserInput(intialUserInput);\r\n    console.log(\"RESET\");\r\n  };\r\n  const inputFormHandler = (input, value) => {\r\n    setUserInput((preValue) => {\r\n      return {\r\n        ...preValue,\r\n        [input]: +value,\r\n      };\r\n    });\r\n    console.log(input, value);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={formSubmitHandler} className={styles.form}>\r\n      <div className={styles[\"input-group\"]}>\r\n        <p>\r\n          <label htmlFor=\"current-savings\">Current Savings ($)</label>\r\n          <input\r\n            onChange={(event) => {\r\n              inputFormHandler(\"current-savings\", event.target.value);\r\n            }}\r\n            value={userInput[\"current-savings\"]}\r\n            type=\"number\"\r\n            id=\"current-savings\"\r\n          />\r\n        </p>\r\n        <p>\r\n          <label htmlFor=\"yearly-contribution\">Yearly Savings ($)</label>\r\n          <input\r\n            onChange={(event) => {\r\n              inputFormHandler(\"contribution\", event.target.value);\r\n            }}\r\n            value={userInput[\"yearly-contribution\"]}\r\n            type=\"number\"\r\n            id=\"yearly-contribution\"\r\n          />\r\n        </p>\r\n      </div>\r\n      <div className={styles[\"input-group\"]}>\r\n        <p>\r\n          <label htmlFor=\"expected-return\">\r\n            Expected Interest (%, per year)\r\n          </label>\r\n          <input\r\n            onChange={(event) => {\r\n              inputFormHandler(\"expected-return\", event.target.value);\r\n            }}\r\n            value={userInput[\"expected-return\"]}\r\n            type=\"number\"\r\n            id=\"expected-return\"\r\n          />\r\n        </p>\r\n        <p>\r\n          <label htmlFor=\"duration\">Investment Duration (years)</label>\r\n          <input\r\n            onChange={(event) => {\r\n              inputFormHandler(\"duration\", event.target.value);\r\n            }}\r\n            value={userInput[\"duration\"]}\r\n            type=\"number\"\r\n            id=\"duration\"\r\n          />\r\n        </p>\r\n      </div>\r\n      <p className={styles.actions}>\r\n        <button onClick={formResetHandler} type=\"reset\" className={styles.buttonAlt}>\r\n          Reset\r\n        </button>\r\n        <button type=\"submit\" className={styles.button}>\r\n          Calculate\r\n        </button>\r\n      </p>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default FormInput;\r\n","import styles from './InvestmentList.module.css';\r\nimport React from 'react';\r\n\r\nconst formatter = new Intl.NumberFormat('en-US', {\r\n  style: 'currency',\r\n  currency: 'USD',\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits : 2,\r\n});\r\n\r\nconst InvestmentList = (props) => {\r\n  return (\r\n    <div>\r\n      <table className={styles.result}>\r\n        <thead>\r\n          <tr>\r\n            <th>Year</th>\r\n            <th>Total Savings</th>\r\n            <th>Interest (Year)</th>\r\n            <th>Total Interest</th>\r\n            <th>Invested Capital</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.onReceiveData.map((yearData) => (\r\n            <tr key = {yearData.year}>\r\n              <td>{yearData.year}</td>\r\n              <td>{formatter.format(yearData.savingsEndOfYear)}</td>\r\n              <td>{formatter.format(yearData.yearlyInterest)}</td>\r\n              <td>\r\n                {formatter.format(yearData.savingsEndOfYear -\r\n                  props.intialInvestment -\r\n                  yearData.yearlyContribution * yearData.year)}\r\n              </td>\r\n              {/* TOTAL INTEREST GAINED */}\r\n              <td>\r\n                {formatter.format(props.intialInvestment +\r\n                  yearData.yearlyContribution * yearData.year)}\r\n              </td>\r\n              {/* TOTAL INVESTED CAPITAL*/}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InvestmentList;\r\n","import Header from \"./components/Header/Header\";\nimport FormInput from \"./components/FormInput/FormInput\";\nimport InvestmentList from \"./components/InvestmentList/InvestmentList\";\nimport React, { useState } from \"react\";\n\nfunction App() {\n  const [userInput, setUserInput] = useState(null);\n  const calculateHandler = (userInput) => {\n    setUserInput(userInput);\n  };\n  const yearlyData = []; // per-year results\n  if (userInput) {\n    \n\n    let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput[\"expected-return\"] / 100;\n    const duration = +userInput[\"duration\"];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n  }\n\n  return (\n    <div>\n      <Header />\n      <FormInput onFormSubmit={calculateHandler} />\n      {!userInput && <p style={{textAlign: 'center'}}>No Informtion is input for calculation yet</p>}\n      {userInput && (\n        <InvestmentList\n          onReceiveData={yearlyData}\n          intialInvestment={userInput[\"current-savings\"]}\n        />\n      )}\n\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}